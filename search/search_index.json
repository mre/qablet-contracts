{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Qablet Contracts What is Qablet TBD Project layout TBD","title":"Welcome to Qablet Contracts"},{"location":"#welcome-to-qablet-contracts","text":"","title":"Welcome to Qablet Contracts"},{"location":"#what-is-qablet","text":"TBD","title":"What is Qablet"},{"location":"#project-layout","text":"TBD","title":"Project layout"},{"location":"examples/bond/","text":"Bonds Create timetables for Zero Coupon Bond and related contracts. zbp_timetable(ccy, opt_maturity, bond_maturity, strike) Create timetable for a zero coupon bond put. Parameters: ccy ( str ) \u2013 the currency of the bond. opt_maturity ( float ) \u2013 the maturity of the option in years. bond_maturity ( float ) \u2013 the maturity of the option in years. strike ( float ) \u2013 the option strike. Source code in qablet_contracts\\bond\\zero.py def zbp_timetable( ccy: str, opt_maturity: float, bond_maturity: float, strike: float ) -> dict: \"\"\"Create timetable for a zero coupon bond put. Args: ccy: the currency of the bond. opt_maturity: the maturity of the option in years. bond_maturity: the maturity of the option in years. strike: the option strike. \"\"\" events = [ { \"track\": \"\", \"time\": opt_maturity, \"op\": \">\", \"quantity\": 0, \"unit\": ccy, }, # Choose greater of nothing or continue to remaining events { \"track\": \"\", \"time\": opt_maturity, \"op\": \"+\", \"quantity\": strike, \"unit\": ccy, }, # get strike at expiration { \"track\": \"\", \"time\": bond_maturity, \"op\": \"+\", \"quantity\": -1, \"unit\": ccy, }, # pay bond notional at bond expiration ] return timetable_from_dicts(events) zcb_timetable(ccy, maturity) Create timetable for a zero coupon bond. Parameters: ccy ( str ) \u2013 the currency of the bond. maturity ( float ) \u2013 the maturity of the bond in years. Source code in qablet_contracts\\bond\\zero.py def zcb_timetable(ccy: str, maturity: float) -> dict: \"\"\"Create timetable for a zero coupon bond. Args: ccy: the currency of the bond. maturity: the maturity of the bond in years. \"\"\" events = [ { \"track\": \"\", \"time\": maturity, \"op\": \"+\", \"quantity\": 1, \"unit\": ccy, } # get bond notional at bond expiration ] return timetable_from_dicts(events)","title":"Bonds"},{"location":"examples/bond/#bonds","text":"Create timetables for Zero Coupon Bond and related contracts.","title":"Bonds"},{"location":"examples/bond/#qablet_contracts.bond.zero.zbp_timetable","text":"Create timetable for a zero coupon bond put. Parameters: ccy ( str ) \u2013 the currency of the bond. opt_maturity ( float ) \u2013 the maturity of the option in years. bond_maturity ( float ) \u2013 the maturity of the option in years. strike ( float ) \u2013 the option strike. Source code in qablet_contracts\\bond\\zero.py def zbp_timetable( ccy: str, opt_maturity: float, bond_maturity: float, strike: float ) -> dict: \"\"\"Create timetable for a zero coupon bond put. Args: ccy: the currency of the bond. opt_maturity: the maturity of the option in years. bond_maturity: the maturity of the option in years. strike: the option strike. \"\"\" events = [ { \"track\": \"\", \"time\": opt_maturity, \"op\": \">\", \"quantity\": 0, \"unit\": ccy, }, # Choose greater of nothing or continue to remaining events { \"track\": \"\", \"time\": opt_maturity, \"op\": \"+\", \"quantity\": strike, \"unit\": ccy, }, # get strike at expiration { \"track\": \"\", \"time\": bond_maturity, \"op\": \"+\", \"quantity\": -1, \"unit\": ccy, }, # pay bond notional at bond expiration ] return timetable_from_dicts(events)","title":"zbp_timetable()"},{"location":"examples/bond/#qablet_contracts.bond.zero.zcb_timetable","text":"Create timetable for a zero coupon bond. Parameters: ccy ( str ) \u2013 the currency of the bond. maturity ( float ) \u2013 the maturity of the bond in years. Source code in qablet_contracts\\bond\\zero.py def zcb_timetable(ccy: str, maturity: float) -> dict: \"\"\"Create timetable for a zero coupon bond. Args: ccy: the currency of the bond. maturity: the maturity of the bond in years. \"\"\" events = [ { \"track\": \"\", \"time\": maturity, \"op\": \"+\", \"quantity\": 1, \"unit\": ccy, } # get bond notional at bond expiration ] return timetable_from_dicts(events)","title":"zcb_timetable()"},{"location":"examples/introduction/","text":"This section contains examples of creating qablet timetables for many financial instruments.","title":"Introduction"},{"location":"specifications/expressions/","text":"Expressions TBD","title":"Expressions"},{"location":"specifications/expressions/#expressions","text":"TBD","title":"Expressions"},{"location":"specifications/operations/","text":"Operations TBD","title":"Operations"},{"location":"specifications/operations/#operations","text":"TBD","title":"Operations"},{"location":"specifications/timetable/","text":"Timetable A contract is described by a list of events. An event has five properties: track time op quantity unit A simple contract can be created using this method timetable_from_dicts(events) Create timetable from a list of dicts. Parameters: events ( list [ dict ] ) \u2013 a list of dicts with the following fields: track: string time: float op: string quantity: float unit: string Returns: dict \u2013 a timetable dictionary with the following fields: events: a pyarrow record batch expressions: a dict for expressions, batches, and snappers Source code in qablet_contracts\\timetable.py def timetable_from_dicts(events: list[dict]) -> dict: \"\"\"Create timetable from a list of dicts. Args: events: a list of dicts with the following fields: - track: string - time: float - op: string - quantity: float - unit: string Returns: a timetable dictionary with the following fields: - events: a pyarrow record batch - expressions: a dict for expressions, batches, and snappers \"\"\" return { \"events\": pa.RecordBatch.from_pylist(events, schema=EVENT_SCHEMA), \"expressions\": {}, } Example from api import timetable_from_dicts events = [ { \"track\": \"\", \"time\": 1.0, \"op\": \"+\", \"quantity\": 100.0, \"unit\": \"USD\" }, ] timetable = timetable_from_dicts(events) print(timetable[\"events\"].to_pandas()) Output: track time op quantity unit 0 1.0 + 100.0 USD Track A String representing the contract, a leg of the contract, or a state of the contract. Time The time of an event in years (f64). Op A string which can be + , > , < , or a condition. See more in the Operations section. Quantity The quantity being paid (f64). Unit A string represents what is being paid. It can be a a currency like USD , EUR a stock, or a commodity, like AAPL , CL a Track an Expression, e.g. a libor fixing, a barrier, or a digital. a Batch event a Snapper, or a Snap See more in the Units section.","title":"Timetable"},{"location":"specifications/timetable/#timetable","text":"A contract is described by a list of events. An event has five properties: track time op quantity unit A simple contract can be created using this method","title":"Timetable"},{"location":"specifications/timetable/#qablet_contracts.timetable.timetable_from_dicts","text":"Create timetable from a list of dicts. Parameters: events ( list [ dict ] ) \u2013 a list of dicts with the following fields: track: string time: float op: string quantity: float unit: string Returns: dict \u2013 a timetable dictionary with the following fields: events: a pyarrow record batch expressions: a dict for expressions, batches, and snappers Source code in qablet_contracts\\timetable.py def timetable_from_dicts(events: list[dict]) -> dict: \"\"\"Create timetable from a list of dicts. Args: events: a list of dicts with the following fields: - track: string - time: float - op: string - quantity: float - unit: string Returns: a timetable dictionary with the following fields: - events: a pyarrow record batch - expressions: a dict for expressions, batches, and snappers \"\"\" return { \"events\": pa.RecordBatch.from_pylist(events, schema=EVENT_SCHEMA), \"expressions\": {}, }","title":"timetable_from_dicts()"},{"location":"specifications/timetable/#example","text":"from api import timetable_from_dicts events = [ { \"track\": \"\", \"time\": 1.0, \"op\": \"+\", \"quantity\": 100.0, \"unit\": \"USD\" }, ] timetable = timetable_from_dicts(events) print(timetable[\"events\"].to_pandas()) Output: track time op quantity unit 0 1.0 + 100.0 USD","title":"Example"},{"location":"specifications/timetable/#track","text":"A String representing the contract, a leg of the contract, or a state of the contract.","title":"Track"},{"location":"specifications/timetable/#time","text":"The time of an event in years (f64).","title":"Time"},{"location":"specifications/timetable/#op","text":"A string which can be + , > , < , or a condition. See more in the Operations section.","title":"Op"},{"location":"specifications/timetable/#quantity","text":"The quantity being paid (f64).","title":"Quantity"},{"location":"specifications/timetable/#unit","text":"A string represents what is being paid. It can be a a currency like USD , EUR a stock, or a commodity, like AAPL , CL a Track an Expression, e.g. a libor fixing, a barrier, or a digital. a Batch event a Snapper, or a Snap See more in the Units section.","title":"Unit"},{"location":"specifications/units/","text":"Unit A string represents what is being paid. It can be a a currency like USD , EUR a stock, or a commodity, like AAPL , CL a Track an Expression, e.g. a libor fixing, a barrier, or a digital. a Batch event a Snapper, or a Snap","title":"Unit"},{"location":"specifications/units/#unit","text":"A string represents what is being paid. It can be a a currency like USD , EUR a stock, or a commodity, like AAPL , CL a Track an Expression, e.g. a libor fixing, a barrier, or a digital. a Batch event a Snapper, or a Snap","title":"Unit"}]}