{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Qablet? A Qablet timetable defines a financial product using a sequence of payments, choices and conditions. A valuation model implemented with a Qablet parser can value any contract, as long as the contract can be described using a Qablet Timetable. Overview of Documentation The SPECIFICATIONS section describes the various elements of the language. Start with the timetable . The EXAMPLES section has code samples to create many common financial contracts such as bonds, options, swaps, and swaptions. Start with the Introduction . Note : This repositary contains code to create qablet timetables. It does not contain models that price qablet timetables. Such models will be available in other independent projects.","title":"Home"},{"location":"#what-is-qablet","text":"A Qablet timetable defines a financial product using a sequence of payments, choices and conditions. A valuation model implemented with a Qablet parser can value any contract, as long as the contract can be described using a Qablet Timetable.","title":"What is Qablet?"},{"location":"#overview-of-documentation","text":"The SPECIFICATIONS section describes the various elements of the language. Start with the timetable . The EXAMPLES section has code samples to create many common financial contracts such as bonds, options, swaps, and swaptions. Start with the Introduction . Note : This repositary contains code to create qablet timetables. It does not contain models that price qablet timetables. Such models will be available in other independent projects.","title":"Overview of Documentation"},{"location":"examples/bond/","text":"Bonds Create timetables for Zero Coupon Bond and related contracts. zbp_timetable(ccy, opt_maturity, bond_maturity, strike) Create timetable for a zero coupon bond put. Parameters: ccy ( str ) \u2013 the currency of the bond. opt_maturity ( float ) \u2013 the maturity of the option in years. bond_maturity ( float ) \u2013 the maturity of the option in years. strike ( float ) \u2013 the option strike. Source code in qablet_contracts\\bond\\zero.py def zbp_timetable( ccy: str, opt_maturity: float, bond_maturity: float, strike: float ) -> dict: \"\"\"Create timetable for a zero coupon bond put. Args: ccy: the currency of the bond. opt_maturity: the maturity of the option in years. bond_maturity: the maturity of the option in years. strike: the option strike. \"\"\" events = [ { \"track\": \"\", \"time\": opt_maturity, \"op\": \">\", \"quantity\": 0, \"unit\": ccy, }, # Choose greater of nothing or continue to remaining events { \"track\": \"\", \"time\": opt_maturity, \"op\": \"+\", \"quantity\": strike, \"unit\": ccy, }, # get strike at expiration { \"track\": \"\", \"time\": bond_maturity, \"op\": \"+\", \"quantity\": -1, \"unit\": ccy, }, # pay bond notional at bond expiration ] return timetable_from_dicts(events) zcb_timetable(ccy, maturity) Create timetable for a zero coupon bond. Parameters: ccy ( str ) \u2013 the currency of the bond. maturity ( float ) \u2013 the maturity of the bond in years. Source code in qablet_contracts\\bond\\zero.py def zcb_timetable(ccy: str, maturity: float) -> dict: \"\"\"Create timetable for a zero coupon bond. Args: ccy: the currency of the bond. maturity: the maturity of the bond in years. \"\"\" events = [ { \"track\": \"\", \"time\": maturity, \"op\": \"+\", \"quantity\": 1, \"unit\": ccy, } # get bond notional at bond expiration ] return timetable_from_dicts(events)","title":"Bonds"},{"location":"examples/bond/#bonds","text":"Create timetables for Zero Coupon Bond and related contracts.","title":"Bonds"},{"location":"examples/bond/#qablet_contracts.bond.zero.zbp_timetable","text":"Create timetable for a zero coupon bond put. Parameters: ccy ( str ) \u2013 the currency of the bond. opt_maturity ( float ) \u2013 the maturity of the option in years. bond_maturity ( float ) \u2013 the maturity of the option in years. strike ( float ) \u2013 the option strike. Source code in qablet_contracts\\bond\\zero.py def zbp_timetable( ccy: str, opt_maturity: float, bond_maturity: float, strike: float ) -> dict: \"\"\"Create timetable for a zero coupon bond put. Args: ccy: the currency of the bond. opt_maturity: the maturity of the option in years. bond_maturity: the maturity of the option in years. strike: the option strike. \"\"\" events = [ { \"track\": \"\", \"time\": opt_maturity, \"op\": \">\", \"quantity\": 0, \"unit\": ccy, }, # Choose greater of nothing or continue to remaining events { \"track\": \"\", \"time\": opt_maturity, \"op\": \"+\", \"quantity\": strike, \"unit\": ccy, }, # get strike at expiration { \"track\": \"\", \"time\": bond_maturity, \"op\": \"+\", \"quantity\": -1, \"unit\": ccy, }, # pay bond notional at bond expiration ] return timetable_from_dicts(events)","title":"zbp_timetable()"},{"location":"examples/bond/#qablet_contracts.bond.zero.zcb_timetable","text":"Create timetable for a zero coupon bond. Parameters: ccy ( str ) \u2013 the currency of the bond. maturity ( float ) \u2013 the maturity of the bond in years. Source code in qablet_contracts\\bond\\zero.py def zcb_timetable(ccy: str, maturity: float) -> dict: \"\"\"Create timetable for a zero coupon bond. Args: ccy: the currency of the bond. maturity: the maturity of the bond in years. \"\"\" events = [ { \"track\": \"\", \"time\": maturity, \"op\": \"+\", \"quantity\": 1, \"unit\": ccy, } # get bond notional at bond expiration ] return timetable_from_dicts(events)","title":"zcb_timetable()"},{"location":"examples/introduction/","text":"This section contains examples of creating qablet timetables for many financial instruments.","title":"Introduction"},{"location":"specifications/expressions/","text":"Expressions Details coming soon.","title":"Expressions"},{"location":"specifications/expressions/#expressions","text":"Details coming soon.","title":"Expressions"},{"location":"specifications/operations/","text":"Operations The op column contains a string which can be + , > , < , or a condition Payment + in the ops column indicates that the contract holder will receive the payment specified by the quantity and the unit , and then continue to receive whatever else is further down in the timetable in the same track. Example: A bond paying 5 USD semi-annually and maturing in two years. track time op quantity unit 0.5 + 5 USD 1.0 + 5 USD 1.5 + 5 USD 2.0 + 105 USD Choice of contract holder > in the ops column indicates that the contract holder can choose from the following two options receive the payment specified by the quantity and the unit , and then terminate the contract. or, instead of that payment, receive whatever else is further down in the timetable in the same track. Example: An European Call Option with strike 2800, expiring in 1 year. track time op quantity unit 1.0 > 0.0 USD 1.0 + -2800.0 USD 1.0 + 1.0 SPX Choice of contract's counterparty < in the ops column indicates that the counterparty can choose from the following two options pay the holder the payment specified by the quantity and the unit , and then terminate the contract. or, instead of that payment, pay the holder whatever else is further down in the timetable in the same track. Example: A callable bond, paying 5 USD semi-annually, maturing in two years, and callable at the end of the first year. track time op quantity unit 0.5 + 5 USD 1.0 + 5 USD 1.0 < 100 USD 1.5 + 5 USD 2.0 + 105 USD Contingent Event Anything else in the op column is the string name of an expression. If the expression evaluates to true, the holder will receive the payment specified by the quantity and the unit , and then terminate the contract. If the expression evaluates to false, then instead of that payment, holder will receive whatever else is further down in the timetable in the same track. Example: knock-in or knock-out events in a barrier option. Snapper If the unit column contains a Snapper, i.e. a path dependent calculation to be performed at that time, then the op column is ignored.","title":"Operations"},{"location":"specifications/operations/#operations","text":"The op column contains a string which can be + , > , < , or a condition","title":"Operations"},{"location":"specifications/operations/#payment","text":"+ in the ops column indicates that the contract holder will receive the payment specified by the quantity and the unit , and then continue to receive whatever else is further down in the timetable in the same track. Example: A bond paying 5 USD semi-annually and maturing in two years. track time op quantity unit 0.5 + 5 USD 1.0 + 5 USD 1.5 + 5 USD 2.0 + 105 USD","title":"Payment"},{"location":"specifications/operations/#choice-of-contract-holder","text":"> in the ops column indicates that the contract holder can choose from the following two options receive the payment specified by the quantity and the unit , and then terminate the contract. or, instead of that payment, receive whatever else is further down in the timetable in the same track. Example: An European Call Option with strike 2800, expiring in 1 year. track time op quantity unit 1.0 > 0.0 USD 1.0 + -2800.0 USD 1.0 + 1.0 SPX","title":"Choice of contract holder"},{"location":"specifications/operations/#choice-of-contracts-counterparty","text":"< in the ops column indicates that the counterparty can choose from the following two options pay the holder the payment specified by the quantity and the unit , and then terminate the contract. or, instead of that payment, pay the holder whatever else is further down in the timetable in the same track. Example: A callable bond, paying 5 USD semi-annually, maturing in two years, and callable at the end of the first year. track time op quantity unit 0.5 + 5 USD 1.0 + 5 USD 1.0 < 100 USD 1.5 + 5 USD 2.0 + 105 USD","title":"Choice of contract's counterparty"},{"location":"specifications/operations/#contingent-event","text":"Anything else in the op column is the string name of an expression. If the expression evaluates to true, the holder will receive the payment specified by the quantity and the unit , and then terminate the contract. If the expression evaluates to false, then instead of that payment, holder will receive whatever else is further down in the timetable in the same track. Example: knock-in or knock-out events in a barrier option.","title":"Contingent Event"},{"location":"specifications/operations/#snapper","text":"If the unit column contains a Snapper, i.e. a path dependent calculation to be performed at that time, then the op column is ignored.","title":"Snapper"},{"location":"specifications/timetable/","text":"Timetable A contract is described by a list of events. An event has five properties: track time op quantity unit Here is an example of an equity call option contract on SPX, with strike 2800 and one year expiration. It is described using three events. track time op quantity unit . 1.0 > 0.0 USD . 1.0 + -2800.0 USD . 1.0 + 1.0 SPX Track A String representing the contract, a leg of the contract, or a state of the contract. Time The time of an event in years (float). Op A string which can be + , > , < , or a condition. See more in the Operations section. Quantity The quantity being paid (float). Unit A string that represents what is being paid. It can be a currency like USD , EUR , or a stock like SPX , AAPL , etc. See the Units section for all possible variants. Utility A simple contract can be created using this method timetable_from_dicts(events) Create timetable from a list of dicts. Parameters: events ( list [ dict ] ) \u2013 a list of dicts with the following fields: track: string time: float op: string quantity: float unit: string Returns: dict \u2013 a timetable dictionary with the following fields: events: a pyarrow record batch expressions: a dict for expressions, batches, and snappers Source code in qablet_contracts\\timetable.py def timetable_from_dicts(events: list[dict]) -> dict: \"\"\"Create timetable from a list of dicts. Args: events: a list of dicts with the following fields: - track: string - time: float - op: string - quantity: float - unit: string Returns: a timetable dictionary with the following fields: - events: a pyarrow record batch - expressions: a dict for expressions, batches, and snappers \"\"\" return { \"events\": pa.RecordBatch.from_pylist(events, schema=EVENT_SCHEMA), \"expressions\": {}, } Example Define a contract that pays 100 USD after 1 year. from api import timetable_from_dicts events = [ { \"track\": \"\", \"time\": 1.0, \"op\": \"+\", \"quantity\": 100.0, \"unit\": \"USD\" }, ] timetable = timetable_from_dicts(events) print(timetable[\"events\"].to_pandas()) Output: track time op quantity unit 0 1.0 + 100.0 USD","title":"Timetable"},{"location":"specifications/timetable/#timetable","text":"A contract is described by a list of events. An event has five properties: track time op quantity unit Here is an example of an equity call option contract on SPX, with strike 2800 and one year expiration. It is described using three events. track time op quantity unit . 1.0 > 0.0 USD . 1.0 + -2800.0 USD . 1.0 + 1.0 SPX","title":"Timetable"},{"location":"specifications/timetable/#track","text":"A String representing the contract, a leg of the contract, or a state of the contract.","title":"Track"},{"location":"specifications/timetable/#time","text":"The time of an event in years (float).","title":"Time"},{"location":"specifications/timetable/#op","text":"A string which can be + , > , < , or a condition. See more in the Operations section.","title":"Op"},{"location":"specifications/timetable/#quantity","text":"The quantity being paid (float).","title":"Quantity"},{"location":"specifications/timetable/#unit","text":"A string that represents what is being paid. It can be a currency like USD , EUR , or a stock like SPX , AAPL , etc. See the Units section for all possible variants.","title":"Unit"},{"location":"specifications/timetable/#utility","text":"A simple contract can be created using this method","title":"Utility"},{"location":"specifications/timetable/#qablet_contracts.timetable.timetable_from_dicts","text":"Create timetable from a list of dicts. Parameters: events ( list [ dict ] ) \u2013 a list of dicts with the following fields: track: string time: float op: string quantity: float unit: string Returns: dict \u2013 a timetable dictionary with the following fields: events: a pyarrow record batch expressions: a dict for expressions, batches, and snappers Source code in qablet_contracts\\timetable.py def timetable_from_dicts(events: list[dict]) -> dict: \"\"\"Create timetable from a list of dicts. Args: events: a list of dicts with the following fields: - track: string - time: float - op: string - quantity: float - unit: string Returns: a timetable dictionary with the following fields: - events: a pyarrow record batch - expressions: a dict for expressions, batches, and snappers \"\"\" return { \"events\": pa.RecordBatch.from_pylist(events, schema=EVENT_SCHEMA), \"expressions\": {}, }","title":"timetable_from_dicts()"},{"location":"specifications/timetable/#example","text":"Define a contract that pays 100 USD after 1 year. from api import timetable_from_dicts events = [ { \"track\": \"\", \"time\": 1.0, \"op\": \"+\", \"quantity\": 100.0, \"unit\": \"USD\" }, ] timetable = timetable_from_dicts(events) print(timetable[\"events\"].to_pandas()) Output: track time op quantity unit 0 1.0 + 100.0 USD","title":"Example"},{"location":"specifications/units/","text":"Unit A string representing what is being paid. It can be a a currency like USD , EUR a stock, or a commodity, like AAPL , CL a Track, e.g. the fixed leg of a swap an Expression, e.g. a libor fixing, a barrier, or a digital. a Batch event, e.g. issuers option to deliver one of many bonds a Snap, i.e. a path dependent quantity, e.g. an accumulator cliquet. It can also represent an action, such as a Snapper, e.g update an accumulator from the current return.","title":"Unit"},{"location":"specifications/units/#unit","text":"A string representing what is being paid. It can be a a currency like USD , EUR a stock, or a commodity, like AAPL , CL a Track, e.g. the fixed leg of a swap an Expression, e.g. a libor fixing, a barrier, or a digital. a Batch event, e.g. issuers option to deliver one of many bonds a Snap, i.e. a path dependent quantity, e.g. an accumulator cliquet. It can also represent an action, such as a Snapper, e.g update an accumulator from the current return.","title":"Unit"}]}